{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GM\\\\Desktop\\\\work\\\\demo-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport PropTypes from 'prop-types';\nimport Tasks from './components/Tasks';\nimport AddForm from './components/AddForm';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [toggleAdd, setToggleAdd] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:8080/tasks/all');\n    const data = await res.json();\n    return data;\n  };\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:8080/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const toggleReminder = async id => {\n    const toggled = await fetch(`http://localhost:8080/tasks/${id}`, {\n      method: 'PUT'\n    });\n    const updatedTask = { ...toggled,\n      reminder: !toggled.reminder\n    };\n    const updatedTasks = await fetchTasks();\n    setTasks([updatedTasks]);\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  const saveTask = async task => {\n    const res = await fetch('http://localhost:8080/tasks', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    console.log(data);\n    setTasks([...tasks, data]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Task Tracker\",\n      toggleAdd: () => setToggleAdd(!toggleAdd),\n      showAdd: toggleAdd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), toggleAdd && /*#__PURE__*/_jsxDEV(AddForm, {\n      saveTask: saveTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 27\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 33\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"No Tasks To Show\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 105\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"w+TtEhkMa/gXQtr9VaJmOnn02dg=\");\n\n_c = App;\nHeader.defaultProps = {\n  title: 'Task Tracker'\n};\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  tasks: PropTypes.array\n};\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/GM/Desktop/work/demo-app/src/App.js"],"names":["Header","PropTypes","Tasks","AddForm","useState","useEffect","App","toggleAdd","setToggleAdd","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","deleteTask","id","method","filter","task","toggleReminder","toggled","updatedTask","reminder","updatedTasks","map","saveTask","headers","body","JSON","stringify","console","log","length","defaultProps","title","propTypes","string","isRequired","array"],"mappings":"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","sourcesContent":["import Header from './components/Header';\r\nimport PropTypes from 'prop-types';\r\nimport Tasks from './components/Tasks';\r\nimport AddForm from './components/AddForm';\r\nimport {useState, useEffect} from 'react';\r\n\r\nconst App = () => {\r\n    const[toggleAdd, setToggleAdd] = useState(false)\r\n    const [tasks, setTasks] = useState([])\r\n    useEffect(() => {\r\n        const getTasks = async () => {\r\n            const tasksFromServer = await fetchTasks()\r\n            setTasks(tasksFromServer)\r\n        }\r\n        getTasks()\r\n    }, [])\r\n    const fetchTasks = async () => {\r\n        const res = await fetch('http://localhost:8080/tasks/all')\r\n        const data = await res.json()\r\n        return data\r\n    }\r\n    const deleteTask = async (id) => {\r\n        await fetch(`http://localhost:8080/tasks/${id}`\r\n                    ,{method: 'DELETE'})\r\n        setTasks(tasks.filter((task) => task.id !== id))\r\n    }\r\n    const toggleReminder = async (id) => {\r\n        const toggled = await fetch(`http://localhost:8080/tasks/${id}`\r\n        ,{method: 'PUT'})\r\n        const updatedTask = {...toggled, reminder: !toggled.reminder}\r\n        const updatedTasks = await fetchTasks()\r\n        setTasks([updatedTasks])\r\n        setTasks(\r\n            tasks.map((task) => task.id === id ? {...task, reminder: !task.reminder} : task)\r\n            )\r\n    }\r\n    const saveTask = async (task) => {\r\n        const res = await fetch('http://localhost:8080/tasks'\r\n                                ,{method: 'POST'\r\n                                 ,headers: {'content-type' : 'application/json'}\r\n                                 ,body: JSON.stringify(task)})\r\n        const data = await res.json()\r\n        console.log(data)\r\n        setTasks([...tasks, data])\r\n    }\r\n    return(\r\n        <div className='container'>\r\n            <Header title='Task Tracker' toggleAdd = {() => setToggleAdd(!toggleAdd)} showAdd={toggleAdd}/>\r\n            {toggleAdd && <AddForm saveTask={saveTask} />}\r\n            {tasks.length > 0 ? <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder}/>: <h2>No Tasks To Show</h2>}\r\n        </div>\r\n    )\r\n}\r\nHeader.defaultProps = {\r\n    title: 'Task Tracker'\r\n}\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    tasks: PropTypes.array\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}