{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GM\\\\Desktop\\\\work\\\\demo-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport PropTypes from 'prop-types';\nimport Tasks from './components/Tasks';\nimport AddForm from './components/AddForm';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [toggleAdd, setToggleAdd] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n    };\n  });\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:8080/tasks/all');\n    const data = await res.json();\n    return data;\n  };\n\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  const saveTask = task => {\n    const id = Math.floor(Math.random() * 1000) + 1;\n    const newTask = {\n      id,\n      ...task\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Task Tracker\",\n      toggleAdd: () => setToggleAdd(!toggleAdd),\n      showAdd: toggleAdd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), toggleAdd && /*#__PURE__*/_jsxDEV(AddForm, {\n      saveTask: saveTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 27\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 33\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"No Tasks To Show\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 105\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"w+TtEhkMa/gXQtr9VaJmOnn02dg=\");\n\n_c = App;\nHeader.defaultProps = {\n  title: 'Task Tracker'\n};\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  tasks: PropTypes.array\n};\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/GM/Desktop/work/demo-app/src/App.js"],"names":["Header","PropTypes","Tasks","AddForm","useState","useEffect","App","toggleAdd","setToggleAdd","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","deleteTask","id","filter","task","toggleReminder","map","reminder","saveTask","Math","floor","random","newTask","length","defaultProps","title","propTypes","string","isRequired","array"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;;AAEA,SAASC,GAAT,GAAc;AAAA;;AACV,QAAK,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMM,QAAQ,GAAG,YAAY;AACzB,YAAMC,eAAe,GAAG,MAAMC,UAAU,EAAxC;AACH,KAFD;AAGH,GAJQ,CAAT;;AAKA,QAAMA,UAAU,GAAG,YAAY;AAC3B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,iCAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACH,GAJD;;AAKA,QAAME,UAAU,GAAIC,EAAD,IAAQ;AACvBT,IAAAA,QAAQ,CAACD,KAAK,CAACW,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACF,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACH,GAFD;;AAGA,QAAMG,cAAc,GAAIH,EAAD,IAAQ;AAC3BT,IAAAA,QAAQ,CACJD,KAAK,CAACc,GAAN,CAAWF,IAAD,IAAUA,IAAI,CAACF,EAAL,KAAYA,EAAZ,GAAiB,EAAC,GAAGE,IAAJ;AAAUG,MAAAA,QAAQ,EAAE,CAACH,IAAI,CAACG;AAA1B,KAAjB,GAAqDH,IAAzE,CADI,CAAR;AAGH,GAJD;;AAKA,QAAMI,QAAQ,GAAIJ,IAAD,IAAU;AACvB,UAAMF,EAAE,GAAGO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,IAAmC,CAA9C;AACA,UAAMC,OAAO,GAAG;AAACV,MAAAA,EAAD;AAAK,SAAGE;AAAR,KAAhB;AACAX,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWoB,OAAX,CAAD,CAAR;AACH,GAJD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,cAAd;AAA6B,MAAA,SAAS,EAAI,MAAMrB,YAAY,CAAC,CAACD,SAAF,CAA5D;AAA0E,MAAA,OAAO,EAAEA;AAAnF;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKA,SAAS,iBAAI,QAAC,OAAD;AAAS,MAAA,QAAQ,EAAEkB;AAAnB;AAAA;AAAA;AAAA;AAAA,YAFlB,EAGKhB,KAAK,CAACqB,MAAN,GAAe,CAAf,gBAAmB,QAAC,KAAD;AAAO,MAAA,KAAK,EAAErB,KAAd;AAAqB,MAAA,QAAQ,EAAES,UAA/B;AAA2C,MAAA,QAAQ,EAAEI;AAArD;AAAA;AAAA;AAAA;AAAA,YAAnB,gBAA2F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHhG;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAjCQhB,G;;KAAAA,G;AAkCTN,MAAM,CAAC+B,YAAP,GAAsB;AAClBC,EAAAA,KAAK,EAAE;AADW,CAAtB;AAGAhC,MAAM,CAACiC,SAAP,GAAmB;AACfD,EAAAA,KAAK,EAAE/B,SAAS,CAACiC,MAAV,CAAiBC,UADT;AAEf1B,EAAAA,KAAK,EAAER,SAAS,CAACmC;AAFF,CAAnB;AAKA,eAAe9B,GAAf","sourcesContent":["import Header from './components/Header';\r\nimport PropTypes from 'prop-types';\r\nimport Tasks from './components/Tasks';\r\nimport AddForm from './components/AddForm';\r\nimport {useState, useEffect} from 'react';\r\n\r\nfunction App(){\r\n    const[toggleAdd, setToggleAdd] = useState(false)\r\n    const [tasks, setTasks] = useState([])\r\n    useEffect(() => {\r\n        const getTasks = async () => {\r\n            const tasksFromServer = await fetchTasks()\r\n        }\r\n    })\r\n    const fetchTasks = async () => {\r\n        const res = await fetch('http://localhost:8080/tasks/all')\r\n        const data = await res.json()\r\n        return data\r\n    }\r\n    const deleteTask = (id) => {\r\n        setTasks(tasks.filter((task) => task.id !== id))\r\n    }\r\n    const toggleReminder = (id) => {\r\n        setTasks(\r\n            tasks.map((task) => task.id === id ? {...task, reminder: !task.reminder}:task)\r\n            )\r\n    }\r\n    const saveTask = (task) => {\r\n        const id = Math.floor(Math.random() * 1000) + 1;\r\n        const newTask = {id, ...task}\r\n        setTasks([...tasks, newTask])\r\n    }\r\n    return(\r\n        <div className='container'>\r\n            <Header title='Task Tracker' toggleAdd = {() => setToggleAdd(!toggleAdd)} showAdd={toggleAdd}/>\r\n            {toggleAdd && <AddForm saveTask={saveTask} />}\r\n            {tasks.length > 0 ? <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder}/>: <h2>No Tasks To Show</h2>}\r\n        </div>\r\n    )\r\n}\r\nHeader.defaultProps = {\r\n    title: 'Task Tracker'\r\n}\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    tasks: PropTypes.array\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}